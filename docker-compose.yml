uvservices:
  # This service runs dagster-webserver, which loads the code from the user codespace container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster-webserver:
    build:
      context: .
      dockerfile: docker/dagster_services.Dockerfile
    container_name: webserver
    env_file:
      - .env
    environment:
      DAGSTER_PG_HOST: ${DAGSTER_PG_HOST}
      DAGSTER_PG_PORT: ${DAGSTER_PG_PORT}
      DAGSTER_PG_USER: ${DAGSTER_PG_USER}
      DAGSTER_PG_PASSWORD: ${DAGSTER_PG_PASSWORD}
      DAGSTER_PG_DB: ${DAGSTER_PG_DB}
      DAGSTER_HOME: ${DAGSTER_HOME}
    expose:
      - "3000"
    ports:
      - "3000:3000"
    networks:
      - dagster_pipeline
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ./dagster_pipeline:/dagster_pipeline/dagster_pipeline:ro
      - ./config:/dagster_pipeline/config:ro
    entrypoint: 
      - dagster-webserver 
      - -h 
      - '0.0.0.0' 
      - -p 
      - '3000'
      - -w 
      - /dagster_pipeline/config/workspace.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/server_info"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    depends_on:
      dagster-deamon:
        condition: service_started
      codespace:
        condition: service_started

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster-deamon:
    build:
      context: .
      dockerfile: docker/dagster_services.Dockerfile
    container_name: deamon
    env_file:
      - .env
    environment:
      DAGSTER_PG_HOST: ${DAGSTER_PG_HOST}
      DAGSTER_PG_PORT: ${DAGSTER_PG_PORT}
      DAGSTER_PG_USER: ${DAGSTER_PG_USER}
      DAGSTER_PG_PASSWORD: ${DAGSTER_PG_PASSWORD}
      DAGSTER_PG_DB: ${DAGSTER_PG_DB}
      DAGSTER_HOME: ${DAGSTER_HOME}
    networks:
      - dagster_pipeline
    volumes:  # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ./dagster_pipeline:/dagster_pipeline/dagster_pipeline:ro
      - ./config:/dagster_pipeline/config:ro
    entrypoint:
      - dagster-daemon
      - run
      - -w
      - /dagster_pipeline/config/workspace.yaml
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      codespace:
        condition: service_started

  codespace:
    build:
      context: .
      dockerfile: docker/codespace.Dockerfile
    container_name: codespace
    env_file:
      - .env
    environment:
      DAGSTER_PG_HOST: ${DAGSTER_PG_HOST}
      DAGSTER_PG_PORT: ${DAGSTER_PG_PORT}
      DAGSTER_PG_USER: ${DAGSTER_PG_USER}
      DAGSTER_PG_PASSWORD: ${DAGSTER_PG_PASSWORD}
      DAGSTER_PG_DB: ${DAGSTER_PG_DB}
      DAGSTER_HOME: ${DAGSTER_HOME}
      DAGSTER_CURRENT_IMAGE: ${DAGSTER_CURRENT_IMAGE} 
    networks:
      - dagster_pipeline
    volumes:
      - ./dagster_pipeline:/dagster_pipeline/dagster_pipeline
      - ./config:/dagster_pipeline/config
      - ./auth:/dagster_pipeline/auth
      - ./data:/dagster_pipeline/data
 

  postgres:
    image: postgres:16
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      POSTGRES_DB: ${POSTGRES_DB} 
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - dagster_pipeline
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-juan-wills} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  dagster_pipeline:
    driver: bridge
    name: dagster_pipeline

volumes:
  postgres-data:
    driver: local